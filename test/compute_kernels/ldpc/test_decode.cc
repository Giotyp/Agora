#include <cstdint>
#include <cstdlib>
#include <cstring>
#include <iomanip>
#include <iostream>
#include <memory>
#include <random>
#include <sstream>
#include <vector>

#include "encoder.h"
#include "memory_manage.h"
#include "phy_ldpc_decoder_5gnr.h"
#include "rte_bbdev.h"
#include "rte_bbdev_op.h"
#include "rte_bus_vdev.h"
#include "rte_common.h"
#include "rte_errno.h"
#include "rte_malloc.h"
#include "scrambler.h"
#include "symbols.h"
#include "utils_ldpc.h"

#define VALUE_DELIMITER ","
#define NB_MBUF 8192
#define OPS_CACHE_SIZE 256U
#define MAX_PKT_BURST 32

#define TEST_SUCCESS 0
#define TEST_FAILED -1

#define PRINT_NUM 40
#define INPUT_DEMUL
#define SW_DECODE
#define HW_DECODE

// char input0[] = "0x7F817F81, 0x7F81817F, 0x7F7F7F7F, 0x81818181, 0x7F81817F, 0x817F8181, 0x817F7F7F, 0x7F817F81, 0x817F7F7F, 0x8181817F, 0x8181817F";
char input0[] = "0x04030201, 0x08070605, 0x0A09";
int8_t input_demul[] = {
    34,   -77,  27,  -16, 3,   14,  41,   -18,  20,  43,  10,  -13,
    66,   101,  -5,  -40, 25,  -10, -76,  85,   -15, -24, 15,  6,
    80,   12,   -19, 49,  11,  -19, -23,  109,  38,  -48, -8,  -18,
    -22,  11,   39,  50,  -9,  -20, 2,    -52,  59,  9,   -29, 21,
    77,   104,  -16, -43, 14,  -13, 73,   73,   -12, -12, 18,  18,
    -17,  28,   44,  33,  -14, -3,  24,   98,   37,  -37, -7,  -7,
    -106, -71,  -45, -10, -15, 20,  14,   -86,  47,  -25, -17, 5,
    -16,  19,   45,  42,  -15, -12, -61,  -107, 0,   -46, 30,  -16,
    66,   -109, -5,  -48, 25,  -18, 41,   -108, 20,  -47, 10,  -17,
    -88,  -90,  -27, -29, 3,   1,   -28,  -49,  33,  12,  -3,  18,
    98,   12,   -37, 49,  -7,  -19, 2,    -85,  59,  -24, -29, 6,
    67,   105,  -6,  -44, 24,  -14, -35,  57,   26,  4,   4,   26,
    -100, -82,  -39, -21, -9,  9,   -52,  -94,  9,   -33, 21,  -3,
    -5,   65,   56,  -4,  -26, 26,  -26,  -87,  35,  -26, -5,  4,
    76,   28,   -15, 33,  15,  -3,  99,   8,    -38, 53,  -8,  -23,
    72,   64,   -11, -3,  19,  27,  15,   -42,  46,  19,  -16, 11,
    -106, 14,   -45, 47,  -15, -17, -23,  74,   38,  -13, -8,  17,
    107,  -97,  -46, -36, -16, -6,  -11,  -11,  50,  50,  -20, -20,
    -22,  35,   39,  26,  -9,  4,   -42,  -42,  19,  19,  11,  11,
    -113, 100,  -52, -39, -22, -9,  -53,  77,   8,   -16, 22,  14,
    73,   -95,  -12, -34, 18,  -4,  -20,  79,   41,  -18, -11, 12,
    38,   -9,   23,  52,  7,   -22, 59,   67,   2,   -6,  28,  24,
    47,   -97,  14,  -36, 16,  -6,  10,   -84,  51,  -23, -21, 7,
    102,  53,   -41, 8,   -11, 22,  -99,  43,   -38, 18,  -8,  12,
    51,   -92,  10,  -31, 20,  -1,  -65,  -116, -4,  -55, 26,  -25,
    -5,   -9,   56,  52,  -26, -22, 83,   56,   -22, 5,   8,   25,
    120,  -75,  -59, -14, -29, 16,  -6,   -76,  55,  -15, -25, 15,
    78,   93,   -17, -32, 13,  -2,  53,   43,   8,   18,  22,  12,
    7,    15,   54,  46,  -24, -16, 3,    -110, 58,  -49, -28, -19,
    76,   51,   -15, 10,  15,  20,  91,   114,  -30, -53, 0,   -23,
    -104, -51,  -43, 10,  -13, 20,  -88,  -89,  -27, -28, 3,   2,
    22,   -49,  39,  12,  -9,  18,  92,   -64,  -31, -3,  -1,  27,
    -57,  105,  4,   -44, 26,  -14, 32,   -90,  29,  -29, 1,   1,
    -88,  51,   -27, 10,  3,   20,  107,  54,   -46, 7,   -16, 23,
    96,   24,   -35, 37,  -5,  -7,  87,   27,   -26, 34,  4,   -4,
    109,  106,  -48, -45, -18, -15, 71,   23,   -10, 38,  20,  -8,
    -104, -15,  -43, 46,  -13, -16, -25,  -7,   36,  54,  -6,  -24,
    15,   104,  46,  -43, -16, -13, -85,  107,  -24, -46, 6,   -16,
    73,   127,  -12, -66, 18,  -36, 55,   -71,  6,   -10, 24,  20,
    -2,   -53,  59,  8,   -29, 22,  49,   -78,  12,  -17, 18,  13,
    102,  -106, -41, -45, -11, -15, 51,   47,   10,  14,  20,  16,
    113,  25,   -52, 36,  -22, -6,  45,   -43,  16,  18,  14,  12,
    -41,  44,   20,  17,  10,  13,  17,   108,  44,  -47, -14, -17,
    104,  -78,  -43, -17, -13, 13,  52,   112,  9,   -51, 21,  -21,
    -110, 73,   -49, -12, -19, 18,  17,   125,  44,  -64, -14, -34,
    108,  39,   -47, 22,  -17, 8,   -13,  -17,  48,  44,  -18, -14,
    -106, 101,  -45, -40, -15, -10, 33,   -75,  28,  -14, 2,   16,
    43,   -103, 18,  -42, 12,  -12, 14,   127,  47,  -66, -17, -36,
    -13,  46,   48,  15,  -18, 15,  63,   -72,  -2,  -11, 28,  19,
    -54,  -17,  7,   44,  23,  -14, 62,   -11,  -1,  50,  29,  -20,
    -88,  93,   -27, -32, 3,   -2,  53,   -76,  8,   -15, 22,  15,
    100,  -14,  -39, 47,  -9,  -17, -38,  72,   23,  -11, 7,   19,
    -72,  -77,  -11, -16, 19,  14,  -22,  109,  39,  -48, -9,  -18,
    83,   -40,  -22, 21,  8,   9,   45,   -103, 16,  -42, 14,  -12,
    47,   -96,  14,  -35, 16,  -5,  -72,  76,   -11, -15, 19,  15,
    -5,   -107, 56,  -46, -26, -16, -71,  13,   -10, 48,  20,  -18,
    16,   105,  45,  -44, -15, -14, -37,  9,    24,  52,  6,   -22,
    -81,  -99,  -20, -38, 10,  -8,  112,  101,  -51, -40, -21, -10,
    -90,  -48,  -29, 13,  1,   17,  -107, -102, -46, -41, -16, -11,
    24,   -8,   37,  53,  -7,  -23, -112, -75,  -51, -14, -21, 16,
    -16,  61,   45,  0,   -15, 30,  88,   97,   -27, -36, 3,   -6,
    -81,  57,   -20, 4,   10,  26,  70,   88,   -9,  -27, 21,  3,
    -95,  -63,  -34, -2,  -4,  28,  69,   -13,  -8,  48,  22,  -18,
    66,   -69,  -5,  -8,  25,  22,  35,   17,   26,  44,  4,   -14,
    -53,  43,   8,   18,  22,  12,  36,   -99,  25,  -38, 5,   -8,
    97,   107,  -36, -46, -6,  -16, -7,   -29,  54,  32,  -24, -2,
    -101, 48,   -40, 13,  -10, 17,  -40,  -15,  21,  46,  9,   -16,
    -101, 39,   -40, 22,  -10, 8,   -34,  -109, 27,  -48, 3,   -18,
    -110, 119,  -49, -58, -19, -28, -85,  -81,  -24, -20, 6,   10,
    -14,  78,   47,  -17, -17, 13,  16,   115,  45,  -54, -15, -24,
    -115, -108, -54, -47, -24, -17, 8,    80,   53,  -19, -23, 11,
    77,   110,  -16, -49, 14,  -19, 107,  -114, -46, -53, -16, -23,
    -113, -46,  -52, 15,  -22, 15,  -46,  -113, 15,  -52, 15,  -22,
    6,    -18,  55,  43,  -25, -13, 72,   -39,  -11, 22,  19,  8,
    -78,  -108, -17, -47, 13,  -17, -73,  -14,  -12, 47,  18,  -17,
    -68,  55,   -7,  6,   23,  24,  33,   109,  28,  -48, 2,   -18,
    48,   65,   13,  -4,  17,  26,  -49,  42,   12,  19,  18,  11,
    78,   22,   -17, 39,  13,  -9,  14,   -51,  47,  10,  -17, 20,
    46,   -114, 15,  -53, 15,  -23, 43,   80,   18,  -19, 12,  11,
    79,   57,   -18, 4,   12,  26,  78,   -82,  -17, -21, 13,  9,
    -42,  46,   19,  15,  11,  15,  -93,  99,   -32, -38, -2,  -8,
    68,   95,   -7,  -34, 23,  -4,  82,   -100, -21, -39, 9,   -9,
    10,   -65,  51,  -4,  -21, 26,  16,   97,   45,  -36, -15, -6,
    -100, -46,  -39, 15,  -9,  15,  -51,  52,   10,  9,   20,  21,
    77,   -95,  -16, -34, 14,  -4,  -38,  -65,  23,  -4,  7,   26,
    114,  -84,  -53, -23, -23, 7,   47,   -9,   14,  52,  16,  -22,
    -111, -104, -50, -43, -20, -13, 112,  65,   -51, -4,  -21, 26,
    -43,  8,    18,  53,  12,  -23, 106,  40,   -45, 21,  -15, 9,
    78,   83,   -17, -22, 13,  8,   70,   46,   -9,  15,  21,  15,
    4,    42,   57,  19,  -27, 11,  107,  44,   -46, 17,  -16, 13,
    78,   77,   -17, -16, 13,  14,  42,   14,   19,  47,  11,  -17,
    -38,  23,   23,  38,  7,   -8,  11,   107,  50,  -46, -20, -16,
    -24,  51,   37,  10,  -7,  20,  102,  115,  -41, -54, -11, -24,
    -83,  -5,   -22, 56,  8,   -26, -39,  58,   22,  3,   8,   27,
    -57,  52,   4,   9,   26,  21,  -53,  8,    8,   53,  22,  -23,
    -18,  92,   43,  -31, -13, -1,  -65,  123,  -4,  -62, 26,  -32,
    54,   -96,  7,   -35, 23,  -5,  93,   99,   -32, -38, -2,  -8,
    81,   -49,  -20, 12,  10,  18,  -12,  105,  49,  -44, -19, -14,
    -7,   87,   54,  -26, -24, 4,   -42,  50,   19,  11,  11,  19,
    -37,  81,   24,  -20, 6,   10,  -46,  -79,  15,  -18, 15,  12,
    -74,  125,  -13, -64, 17,  -34, 50,   51,   11,  10,  19,  20,
    108,  -42,  -47, 19,  -17, 11,  -118, 27,   -57, 34,  -27, -4,
    98,   88,   -37, -27, -7,  3,   100,  67,   -39, -6,  -9,  24,
    -30,  -118, 31,  -57, -1,  -27, -20,  117,  41,  -56, -11, -26,
    -55,  122,  6,   -61, 24,  -31, 45,   -49,  16,  12,  14,  18,
    55,   -108, 6,   -47, 24,  -17, -108, 113,  -47, -52, -17, -22,
    32,   -20,  29,  41,  1,   -11, -44,  46,   17,  15,  13,  15,
    66,   55,   -5,  6,   25,  24,  -109, 88,   -48, -27, -18, 3,
    70,   33,   -9,  28,  21,  2,   15,   27,   46,  34,  -16, -4,
    -77,  68,   -16, -7,  14,  23,  -40,  -17,  21,  44,  9,   -14,
    -69,  -69,  -8,  -8,  22,  22,  -107, 48,   -46, 13,  -16, 17,
    43,   11,   18,  50,  12,  -20, -36,  -3,   25,  58,  5,   -28,
    -75,  109,  -14, -48, 16,  -18, 13,   37,   48,  24,  -18, 6,
    38,   14,   23,  47,  7,   -17, -76,  68,   -15, -7,  15,  23,
    -106, -18,  -45, 43,  -15, -13, -91,  16,   -30, 45,  0,   -15,
    93,   81,   -32, -20, -2,  10,  -72,  87,   -11, -26, 19,  4,
    -26,  85,   35,  -24, -5,  6,   52,   -122, 9,   -61, 21,  -31,
    108,  83,   -47, -22, -17, 8,   -20,  10,   41,  51,  -11, -21,
    -18,  91,   43,  -30, -13, 0,   -46,  89,   15,  -28, 15,  2,
    122,  28,   -61, 33,  -31, -3,  -21,  -15,  40,  46,  -10, -16,
    45,   50,   16,  11,  14,  19,  -110, 110,  -49, -49, -19, -19,
    40,   121,  21,  -60, 9,   -30, -10,  -49,  51,  12,  -21, 18,
    -29,  51,   32,  10,  -2,  20,  -78,  71,   -17, -10, 13,  20,
    27,   -104, 34,  -43, -4,  -13, 18,   -18,  43,  43,  -13, -13,
    45,   -97,  16,  -36, 14,  -6,  -20,  -20,  41,  41,  -11, -11,
    121,  4,    -60, 57,  -30, -27, 107,  -18,  -46, 43,  -16, -13,
    12,   119,  49,  -58, -19, -28, -82,  -37,  -21, 24,  9,   6,
    119,  105,  -58, -44, -28, -14, -20,  110,  41,  -49, -11, -19,
    -106, -14,  -45, 47,  -15, -17, 13,   -37,  48,  24,  -18, 6,
    -108, -87,  -47, -26, -17, 4,   -41,  -14,  20,  47,  10,  -17,
    -78,  1,    -17, 60,  13,  -30, -43,  116,  18,  -55, 12,  -25,
    -70,  25,   -9,  36,  21,  -6,  68,   14,   -7,  47,  23,  -17,
    -82,  -51,  -21, 10,  9,   20,  -35,  48,   26,  13,  4,   17,
    56,   -20,  5,   41,  25,  -11, -18,  -42,  43,  19,  -13, 11,
    116,  76,   -55, -15, -25, 15,  76,   -52,  -15, 9,   15,  21,
    -90,  -83,  -29, -22, 1,   8,   17,   -79,  44,  -18, -14, 12,
    -68,  -71,  -7,  -10, 23,  20,  39,   76,   22,  -15, 8,   15,
    16,   77,   45,  -16, -15, 14,  49,   -4,   12,  57,  18,  -27,
    31,   17,   30,  44,  0,   -14, -20,  -109, 41,  -48, -11, -18,
    11,   41,   50,  20,  -20, 10,  -71,  -20,  -10, 41,  20,  -11,
    115,  68,   -54, -7,  -24, 23,  -19,  -26,  42,  35,  -12, -5,
    -48,  -9,   13,  52,  17,  -22, -88,  33,   -27, 28,  3,   2,
    -80,  -18,  -19, 43,  11,  -13, -119, 107,  -58, -46, -28, -16,
    -115, -123, -54, -62, -24, -32, 120,  15,   -59, 46,  -29, -16,
    -40,  -46,  21,  15,  9,   15,  34,   111,  27,  -50, 3,   -20,
    77,   -1,   -16, 60,  14,  -30, 65,   15,   -4,  46,  26,  -16,
    44,   -40,  17,  21,  13,  9,   78,   27,   -17, 34,  13,  -4,
    15,   -22,  46,  39,  -16, -9,  48,   -103, 13,  -42, 17,  -12,
    -43,  24,   18,  37,  12,  -7,  48,   -56,  13,  5,   17,  25,
    -37,  79,   24,  -18, 6,   12,  -47,  -26,  14,  35,  16,  -5,
    -68,  93,   -7,  -32, 23,  -2,  41,   -46,  20,  15,  10,  15,
    19,   -45,  42,  16,  -12, 14,  -20,  70,   41,  -9,  -11, 21,
    62,   89,   -1,  -28, 29,  2,   1,    102,  60,  -41, -30, -11,
    90,   94,   -29, -33, 1,   -3,  -19,  -52,  42,  9,   -12, 21,
    13,   9,    48,  52,  -18, -22, 101,  60,   -40, 1,   -10, 29,
    67,   113,  -6,  -52, 24,  -22, -93,  121,  -32, -60, -2,  -30,
    -47,  14,   14,  47,  16,  -17, -70,  -101, -9,  -40, 21,  -10,
    -99,  -82,  -38, -21, -8,  9,   -94,  -22,  -33, 39,  -3,  -9,
    -26,  7,    35,  54,  -5,  -24, -13,  -65,  48,  -4,  -18, 26,
    -78,  44,   -17, 17,  13,  13,  -90,  13,   -29, 48,  1,   -18,
    42,   -40,  19,  21,  11,  9,   -16,  -91,  45,  -30, -15, 0,
    34,   -18,  27,  43,  3,   -13, -79,  105,  -18, -44, 12,  -14,
    39,   48,   22,  13,  8,   17,  55,   104,  6,   -43, 24,  -13,
    99,   -20,  -38, 41,  -8,  -11, 52,   14,   9,   47,  21,  -17,
    -11,  54,   50,  7,   -20, 23,  -24,  -121, 37,  -60, -7,  -30,
    100,  -18,  -39, 43,  -9,  -13, 65,   76,   -4,  -15, 26,  15,
    -49,  17,   12,  44,  18,  -14, 57,   -14,  4,   47,  26,  -17,
    22,   29,   39,  32,  -9,  -2,  113,  76,   -52, -15, -22, 15,
    -34,  -46,  27,  15,  3,   15,  36,   47,   25,  14,  5,   16,
    65,   22,   -4,  39,  26,  -9,  -19,  11,   42,  50,  -12, -20,
    -107, 97,   -46, -36, -16, -6,  106,  72,   -45, -11, -15, 19,
    18,   51,   43,  10,  -13, 20,  17,   67,   44,  -6,  -14, 24,
    53,   -36,  8,   25,  22,  5,   -90,  110,  -29, -49, 1,   -19,
    55,   -102, 6,   -41, 24,  -11, 115,  20,   -54, 41,  -24, -11,
    72,   57,   -11, 4,   19,  26,  18,   -85,  43,  -24, -13, 6,
    87,   -71,  -26, -10, 4,   20,  53,   55,   8,   6,   22,  24,
    -51,  6,    10,  55,  20,  -25, 115,  -58,  -54, 3,   -24, 27,
    -83,  28,   -22, 33,  8,   -3,  5,    82,   56,  -21, -26, 9,
    21,   -100, 40,  -39, -10, -9,  -39,  -15,  22,  46,  8,   -16,
    15,   -41,  46,  20,  -16, 10,  102,  -31,  -41, 30,  -11, 0,
    -69,  -65,  -8,  -4,  22,  26,  102,  114,  -41, -53, -11, -23,
    -56,  -117, 5,   -56, 25,  -26, -3,   107,  58,  -46, -28, -16,
    2,    -105, 59,  -44, -29, -14, 43,   -14,  18,  47,  12,  -17,
    -49,  74,   12,  -13, 18,  17,  67,   57,   -6,  4,   24,  26,
    -50,  42,   11,  19,  19,  11,  -44,  -116, 17,  -55, 13,  -25,
    -53,  -29,  8,   32,  22,  -2,  106,  -44,  -45, 17,  -15, 13,
    106,  -11,  -45, 50,  -15, -20, -85,  -88,  -24, -27, 6,   3,
    38,   82,   23,  -21, 7,   9,   -120, 17,   -59, 44,  -29, -14,
    -52,  -80,  9,   -19, 21,  11,  -86,  101,  -25, -40, 5,   -10,
    115,  -96,  -54, -35, -24, -5,  -76,  35,   -15, 26,  15,  4,
    -36,  -110, 25,  -49, 5,   -19, 13,   7,    48,  54,  -18, -24,
    76,   10,   -15, 51,  15,  -21, 110,  3,    -49, 58,  -19, -28,
    34,   -76,  27,  -15, 3,   15,  10,   23,   51,  38,  -21, -8,
    -62,  71,   -1,  -10, 29,  20,  -9,   16,   52,  45,  -22, -15,
    -106, 31,   -45, 30,  -15, 0,   72,   -8,   -11, 53,  19,  -23,
    114,  -72,  -53, -11, -23, 19,  75,   23,   -14, 38,  16,  -8,
    46,   -26,  15,  35,  15,  -5,  -103, -12,  -42, 49,  -12, -19,
    72,   -87,  -11, -26, 19,  4,   -23,  -3,   38,  58,  -8,  -28,
    69,   96,   -8,  -35, 22,  -5,  -103, -102, -42, -41, -12, -11,
    -94,  11,   -33, 50,  -3,  -20, 44,   -41,  17,  20,  13,  10,
    -49,  -108, 12,  -47, 18,  -17, -42,  37,   19,  24,  11,  6,
    15,   21,   46,  40,  -16, -10, -105, -77,  -44, -16, -14, 14,
    -22,  -79,  39,  -18, -9,  12,  10,   99,   51,  -38, -21, -8,
    -12,  -103, 49,  -42, -19, -12, 49,   100,  12,  -39, 18,  -9,
    95,   12,   -34, 49,  -4,  -19, 113,  96,   -52, -35, -22, -5,
    -101, -10,  -40, 51,  -10, -21, -102, -52,  -41, 9,   -11, 21,
    -100, -104, -39, -43, -9,  -13, 105,  15,   -44, 46,  -14, -16,
    98,   80,   -37, -19, -7,  11,  -38,  -45,  23,  16,  7,   14,
    44,   117,  17,  -56, 13,  -26, -83,  36,   -22, 25,  8,   5,
    14,   -83,  47,  -22, -17, 8,   49,   55,   12,  6,   18,  24,
    -111, 10,   -50, 51,  -20, -21, 87,   -18,  -26, 43,  4,   -13,
    78,   46,   -17, 15,  13,  15,  9,    -84,  52,  -23, -22, 7,
    -76,  -114, -15, -53, 15,  -23, -94,  122,  -33, -61, -3,  -31,
    90,   -82,  -29, -21, 1,   9,   -24,  -66,  37,  -5,  -7,  25,
    57,   -53,  4,   8,   26,  22,  -5,   -22,  56,  39,  -26, -9,
    86,   21,   -25, 40,  5,   -10, 84,   -53,  -23, 8,   7,   22,
    80,   -25,  -19, 36,  11,  -6,  111,  -20,  -50, 41,  -20, -11,
    -104, 57,   -43, 4,   -13, 26,  -50,  -80,  11,  -19, 19,  11,
    -82,  -11,  -21, 50,  9,   -20, -13,  -22,  48,  39,  -18, -9,
    50,   48,   11,  13,  19,  17,  -5,   38,   56,  23,  -26, 7,
    -95,  117,  -34, -56, -4,  -26, 6,    -23,  55,  38,  -25, -8,
    80,   77,   -19, -16, 11,  14,  85,   -17,  -24, 44,  6,   -14,
    81,   98,   -20, -37, 10,  -7,  -83,  -112, -22, -51, 8,   -21,
    -76,  17,   -15, 44,  15,  -14, 93,   47,   -32, 14,  -2,  16,
    104,  13,   -43, 48,  -13, -18, 78,   47,   -17, 14,  13,  16,
    46,   -122, 15,  -61, 15,  -31, -120, -116, -59, -55, -29, -25,
    -128, -121, -67, -60, -37, -30, 127,  117,  -66, -56, -36, -26,
    82,   -86,  -21, -25, 9,   5,   -119, -18,  -58, 43,  -28, -13,
    101,  -96,  -40, -35, -10, -5,  -38,  86,   23,  -25, 7,   5,
    -9,   -38,  52,  23,  -22, 7,   14,   -104, 47,  -43, -17, -13,
    62,   -72,  -1,  -11, 29,  19,  14,   -94,  47,  -33, -17, -3,
    25,   -17,  36,  44,  -6,  -14, -23,  -45,  38,  16,  -8,  14,
    50,   43,   11,  18,  19,  12,  117,  -45,  -56, 16,  -26, 14,
    34,   -37,  27,  24,  3,   6,   104,  -81,  -43, -20, -13, 10,
    -15,  -20,  46,  41,  -16, -11, -53,  -97,  8,   -36, 22,  -6,
    21,   -8,   40,  53,  -10, -23, -48,  40,   13,  21,  17,  9,
    24,   46,   37,  15,  -7,  15,  -81,  127,  -20, -66, 10,  -36,
    -71,  119,  -10, -58, 20,  -28, -86,  -37,  -25, 24,  5,   6,
    -76,  -46,  -15, 15,  15,  15,  -100, -8,   -39, 53,  -9,  -23,
    -69,  46,   -8,  15,  22,  15,  117,  43,   -56, 18,  -26, 12,
    -49,  -45,  12,  16,  18,  14,  -52,  -18,  9,   43,  21,  -13,
    121,  43,   -60, 18,  -30, 12,  37,   89,   24,  -28, 6,   2,
    -20,  -12,  41,  49,  -11, -19, 22,   -4,   39,  57,  -9,  -27,
    -112, 122,  -51, -61, -21, -31, -44,  83,   17,  -22, 13,  8,
    -17,  41,   44,  20,  -14, 10,  112,  8,    -51, 53,  -21, -23,
    -46,  -101, 15,  -40, 15,  -10, -9,   -49,  52,  12,  -22, 18,
    91,   93,   -30, -32, 0,   -2,  -58,  46,   3,   15,  27,  15,
    -75,  93,   -14, -32, 16,  -2,  95,   -111, -34, -50, -4,  -20,
    -19,  -88,  42,  -27, -12, 3,   -66,  13,   -5,  48,  25,  -18,
    47,   -55,  14,  6,   16,  24,  -87,  85,   -26, -24, 4,   6,
    -60,  26,   1,   35,  29,  -5,  -115, 56,   -54, 5,   -24, 25,
    -42,  41,   19,  20,  11,  10,  -48,  -75,  13,  -14, 17,  16,
    110,  -14,  -49, 47,  -19, -17, 20,   78,   41,  -17, -11, 13,
    119,  -44,  -58, 17,  -28, 13,  15,   97,   46,  -36, -16, -6,
    -113, 13,   -52, 48,  -22, -18, 42,   -14,  19,  47,  11,  -17,
    -111, -53,  -50, 8,   -20, 22,  -77,  -81,  -16, -20, 14,  10,
    51,   71,   10,  -10, 20,  20,  -45,  68,   16,  -7,  14,  23,
    47,   -48,  14,  13,  16,  17,  85,   21,   -24, 40,  6,   -10,
    -53,  80,   8,   -19, 22,  11,  71,   -12,  -10, 49,  20,  -19,
    114,  54,   -53, 7,   -23, 23,  53,   85,   8,   -24, 22,  6,
    -21,  -8,   40,  53,  -10, -23, -52,  65,   9,   -4,  21,  26,
    -128, -107, -67, -46, -37, -16, 42,   -117, 19,  -56, 11,  -26,
    50,   -16,  11,  45,  19,  -15, -23,  -44,  38,  17,  -8,  13,
    60,   104,  1,   -43, 29,  -13, -12,  48,   49,  13,  -19, 17,
    28,   103,  33,  -42, -3,  -12, 23,   -64,  38,  -3,  -8,  27,
    31,   35,   30,  26,  0,   4,   -43,  64,   18,  -3,  12,  27,
    36,   -33,  25,  28,  5,   2,   11,   48,   50,  13,  -20, 17,
    -79,  8,    -18, 53,  12,  -23, -17,  -15,  44,  46,  -14, -16,
    46,   26,   15,  35,  15,  -5,  -123, -16,  -62, 45,  -32, -15,
    -85,  53,   -24, 8,   6,   22,  26,   79,   35,  -18, -5,  12,
    112,  80,   -51, -19, -21, 11,  111,  -17,  -50, 44,  -20, -14,
    -73,  -75,  -12, -14, 18,  16,  -32,  -47,  29,  14,  1,   16,
    68,   -72,  -7,  -11, 23,  19,  -50,  -34,  11,  27,  19,  3,
    -44,  81,   17,  -20, 13,  10,  -45,  29,   16,  32,  14,  -2,
    -88,  96,   -27, -35, 3,   -5,  -39,  -13,  22,  48,  8,   -18,
    -107, -14,  -46, 47,  -16, -17, 5,    -63,  56,  -2,  -26, 28,
    -49,  -113, 12,  -52, 18,  -22, -81,  -48,  -20, 13,  10,  17,
    -111, -83,  -50, -22, -20, 8,   -8,   78,   53,  -17, -23, 13,
    52,   25,   9,   36,  21,  -6,  -15,  -48,  46,  13,  -16, 17,
    115,  -54,  -54, 7,   -24, 23,  104,  105,  -43, -44, -13, -14,
    -18,  -97,  43,  -36, -13, -6,  -78,  -96,  -17, -35, 13,  -5,
    48,   57,   13,  4,   17,  26,  -36,  45,   25,  16,  5,   14,
    30,   -43,  31,  18,  -1,  12,  70,   10,   -9,  51,  21,  -21,
    -48,  -39,  13,  22,  17,  8,   20,   62,   41,  -1,  -11, 29,
    71,   51,   -10, 10,  20,  20,  -41,  -16,  20,  45,  10,  -15,
    -29,  -16,  32,  45,  -2,  -15, 45,   -104, 16,  -43, 14,  -13,
    81,   112,  -20, -51, 10,  -21, 83,   -109, -22, -48, 8,   -18,
    -54,  17,   7,   44,  23,  -14, -79,  -20,  -18, 41,  12,  -11,
    127,  120,  -66, -59, -36, -29, 106,  -126, -45, -65, -15, -35,
    -103, -111, -42, -50, -12, -20, 117,  103,  -56, -42, -26, -12,
    -27,  14,   34,  47,  -4,  -17, -119, -25,  -58, 36,  -28, -6,
    4,    -72,  57,  -11, -27, 19,  110,  -110, -49, -49, -19, -19,
    100,  86,   -39, -25, -9,  5,   107,  47,   -46, 14,  -16, 16,
    -42,  46,   19,  15,  11,  15,  0,    -88,  61,  -27, -31, 3,
    -90,  85,   -29, -24, 1,   6,   63,   -36,  -2,  25,  28,  5,
    -30,  -18,  31,  43,  -1,  -13, -11,  22,   50,  39,  -20, -9,
    -54,  88,   7,   -27, 23,  3,   -109, -106, -48, -45, -18, -15,
    -90,  -110, -29, -49, 1,   -19, -64,  107,  -3,  -46, 27,  -16,
    -24,  116,  37,  -55, -7,  -25, 25,   -39,  36,  22,  -6,  8,
    19,   -16,  42,  45,  -12, -15, 69,   -113, -8,  -52, 22,  -22,
    -20,  79,   41,  -18, -11, 12,  -92,  -84,  -31, -23, -1,  7,
    -114, -48,  -53, 13,  -23, 17,  79,   -48,  -18, 13,  12,  17,
    88,   -39,  -27, 22,  3,   8,   -39,  -74,  22,  -13, 8,   17,
    -116, -86,  -55, -25, -25, 5,   -113, 39,   -52, 22,  -22, 8,
    -58,  74,   3,   -13, 27,  17,  46,   98,   15,  -37, 15,  -7,
    -50,  -84,  11,  -23, 19,  7,   -14,  19,   47,  42,  -17, -12,
    53,   -8,   8,   53,  22,  -23, 122,  -115, -61, -54, -31, -24,
    78,   90,   -17, -29, 13,  1,   86,   -45,  -25, 16,  5,   14,
    123,  -104, -62, -43, -32, -13, -27,  7,    34,  54,  -4,  -24,
    102,  -48,  -41, 13,  -11, 17,  -61,  -122, 0,   -61, 30,  -31,
    21,   42,   40,  19,  -10, 11,  -79,  -113, -18, -52, 12,  -22,
    -45,  -47,  16,  14,  14,  16,  -76,  -46,  -15, 15,  15,  15,
    89,   -67,  -28, -6,  2,   24,  -61,  -29,  0,   32,  30,  -2,
    -7,   -13,  54,  48,  -24, -18, 67,   80,   -6,  -19, 24,  11,
    -97,  -91,  -36, -30, -6,  0,   -17,  89,   44,  -28, -14, 2,
    -3,   -87,  58,  -26, -28, 4,   22,   -101, 39,  -40, -9,  -10,
    95,   -35,  -34, 26,  -4,  4,   75,   -73,  -14, -12, 16,  18,
    -20,  -21,  41,  40,  -11, -10, 41,   -44,  20,  17,  10,  13,
    47,   36,   14,  25,  16,  5,   -15,  -39,  46,  22,  -16, 8,
    54,   45,   7,   16,  23,  14,  -83,  -40,  -22, 21,  8,   9,
    106,  -110, -45, -49, -15, -19, 126,  -75,  -65, -14, -35, 16,
    122,  42,   -61, 19,  -31, 11,  52,   -100, 9,   -39, 21,  -9,
    -47,  -45,  14,  16,  16,  14,  -113, -86,  -52, -25, -22, 5,
    82,   31,   -21, 30,  9,   0,   -23,  5,    38,  56,  -8,  -26,
    76,   -13,  -15, 48,  15,  -18, 47,   78,   14,  -17, 16,  13,
    -109, -68,  -48, -7,  -18, 23,  -99,  -111, -38, -50, -8,  -20,
    -20,  46,   41,  15,  -11, 15,  -65,  7,    -4,  54,  26,  -24,
    -105, 105,  -44, -44, -14, -14, 106,  -79,  -45, -18, -15, 12,
    21,   99,   40,  -38, -10, -8,  -58,  -82,  3,   -21, 27,  9,
    -107, 78,   -46, -17, -16, 13,  110,  -48,  -49, 13,  -19, 17,
    87,   -44,  -26, 17,  4,   13,  15,   -52,  46,  9,   -16, 21,
    -67,  102,  -6,  -41, 24,  -11, -29,  110,  32,  -49, -2,  -19,
    -42,  -24,  19,  37,  11,  -7,  -18,  108,  43,  -47, -13, -17,
    -47,  -23,  14,  38,  16,  -8,  -110, 50,   -49, 11,  -19, 19,
    85,   105,  -24, -44, 6,   -14, -107, -77,  -46, -16, -16, 14,
    -113, 110,  -52, -49, -22, -19, -76,  29,   -15, 32,  15,  -2,
    22,   38,   39,  23,  -9,  7,   90,   -21,  -29, 40,  1,   -10,
    -53,  -58,  8,   3,   22,  27,  -63,  -84,  -2,  -23, 28,  7,
    103,  61,   -42, 0,   -12, 30,  -128, -15,  -67, 46,  -37, -16,
    104,  69,   -43, -8,  -13, 22,  -42,  19,   19,  42,  11,  -12,
    -80,  -54,  -19, 7,   11,  23,  12,   106,  49,  -45, -19, -15,
    -51,  -12,  10,  49,  20,  -19, 100,  -109, -39, -48, -9,  -18,
    -69,  47,   -8,  14,  22,  16,  11,   67,   50,  -6,  -20, 24,
    73,   18,   -12, 43,  18,  -13, -42,  33,   19,  28,  11,  2,
    -46,  13,   15,  48,  15,  -18, 104,  -43,  -43, 18,  -13, 12,
    -105, -40,  -44, 21,  -14, 9,   -92,  93,   -31, -32, -1,  -2,
    99,   -94,  -38, -33, -8,  -3,  -102, -41,  -41, 20,  -11, 10,
    72,   -68,  -11, -7,  19,  23,  16,   101,  45,  -40, -15, -10,
    4,    -75,  57,  -14, -27, 16,  97,   12,   -36, 49,  -6,  -19,
    -108, -43,  -47, 18,  -17, 12,  -102, 65,   -41, -4,  -11, 26,
    -109, 95,   -48, -34, -18, -4,  -72,  75,   -11, -14, 19,  16,
    -75,  53,   -14, 8,   16,  22,  94,   -113, -33, -52, -3,  -22,
    50,   -73,  11,  -12, 19,  18,  90,   -99,  -29, -38, 1,   -8,
    -101, -86,  -40, -25, -10, 5,   85,   29,   -24, 32,  6,   -2,
    -77,  105,  -16, -44, 14,  -14, -49,  -12,  12,  49,  18,  -19,
    -86,  48,   -25, 13,  5,   17,  15,   38,   46,  23,  -16, 7,
    118,  -87,  -57, -26, -27, 4,   81,   -20,  -20, 41,  10,  -11,
    86,   -122, -25, -61, 5,   -31, -59,  -128, 2,   -67, 28,  -37,
    -56,  -78,  5,   -17, 25,  13,  92,   -113, -31, -52, -1,  -22,
    -124, 109,  -63, -48, -33, -18, -42,  -46,  19,  15,  11,  15,
    31,   -28,  30,  33,  0,   -3,  -67,  44,   -6,  17,  24,  13,
    115,  -32,  -54, 29,  -24, 1,   -111, 83,   -50, -22, -20, 8,
    29,   -111, 32,  -50, -2,  -20, 57,   91,   4,   -30, 26,  0,
    -52,  -108, 9,   -47, 21,  -17, -57,  -116, 4,   -55, 26,  -25,
    103,  -104, -42, -43, -12, -13, -25,  -103, 36,  -42, -6,  -12,
    -109, 25,   -48, 36,  -18, -6,  -15,  56,   46,  5,   -16, 25,
    -55,  -108, 6,   -47, 24,  -17, -10,  89,   51,  -28, -21, 2,
    35,   -78,  26,  -17, 4,   13,  74,   -49,  -13, 12,  17,  18,
    -11,  -45,  50,  16,  -20, 14,  85,   -103, -24, -42, 6,   -12,
    -17,  -83,  44,  -22, -14, 8,   -63,  -108, -2,  -47, 28,  -17,
    103,  -20,  -42, 41,  -12, -11, 41,   113,  20,  -52, 10,  -22,
    -17,  -114, 44,  -53, -14, -23, -51,  -48,  10,  13,  20,  17,
    -29,  74,   32,  -13, -2,  17,  46,   15,   15,  46,  15,  -16,
    81,   27,   -20, 34,  10,  -4,  -64,  -103, -3,  -42, 27,  -12,
    -67,  3,    -6,  58,  24,  -28, -34,  50,   27,  11,  3,   19,
    112,  78,   -51, -17, -21, 13,  86,   64,   -25, -3,  5,   27,
    -115, -33,  -54, 28,  -24, 2,   -46,  -88,  15,  -27, 15,  3,
    -122, -22,  -61, 39,  -31, -9,  -128, 111,  -67, -50, -37, -20,
    28,   -96,  33,  -35, -3,  -5,  107,  127,  -46, -66, -16, -36,
    -98,  68,   -37, -7,  -7,  23,  83,   89,   -22, -28, 8,   2,
    45,   -49,  16,  12,  14,  18,  -14,  -37,  47,  24,  -17, 6,
    -108, 106,  -47, -45, -17, -15, -78,  110,  -17, -49, 13,  -19,
    -70,  -22,  -9,  39,  21,  -9,  47,   79,   14,  -18, 16,  12,
    79,   50,   -18, 11,  12,  19,  -20,  82,   41,  -21, -11, 9,
    -48,  108,  13,  -47, 17,  -17, 37,   83,   24,  -22, 6,   8,
    -47,  75,   14,  -14, 16,  16,  -50,  -106, 11,  -45, 19,  -15,
    39,   -75,  22,  -14, 8,   16,  73,   -80,  -12, -19, 18,  11,
    -68,  -99,  -7,  -38, 23,  -8,  70,   -14,  -9,  47,  21,  -17,
    44,   -43,  17,  18,  13,  12,  -52,  16,   9,   45,  21,  -15,
    15,   -128, 46,  -67, -16, -37, -72,  92,   -11, -31, 19,  -1,
    -6,   -1,   55,  60,  -25, -30, 25,   -55,  36,  6,   -6,  24,
    -93,  -118, -32, -57, -2,  -27, 36,   -21,  25,  40,  5,   -10,
    48,   -92,  13,  -31, 17,  -1,  81,   -110, -20, -49, 10,  -19,
    -116, -102, -55, -41, -25, -11, 76,   -25,  -15, 36,  15,  -6,
    -88,  119,  -27, -58, 3,   -28, -10,  59,   51,  2,   -21, 28,
    28,   -45,  33,  16,  -3,  14,  77,   15,   -16, 46,  14,  -16,
    -45,  11,   16,  50,  14,  -20, -44,  -54,  17,  7,   13,  23,
    -112, -51,  -51, 10,  -21, 20,  34,   -128, 27,  -67, 3,   -37,
    43,   -108, 18,  -47, 12,  -17, 6,    -46,  55,  15,  -25, 15,
    -24,  51,   37,  10,  -7,  20,  -14,  16,   47,  45,  -17, -15,
    18,   -122, 43,  -61, -13, -31, 85,   -16,  -24, 45,  6,   -15,
    -128, -109, -67, -48, -37, -18, 80,   21,   -19, 40,  11,  -10,
    34,   -90,  27,  -29, 3,   1,   81,   18,   -20, 43,  10,  -13,
    -55,  -76,  6,   -15, 24,  15,  27,   120,  34,  -59, -4,  -29,
    86,   -86,  -25, -25, 5,   5,   48,   -128, 13,  -67, 17,  -37,
    121,  120,  -60, -59, -30, -29, 15,   -128, 46,  -67, -16, -37,
    120,  84,   -59, -23, -29, 7,   5,    -16,  56,  45,  -26, -15,
    115,  126,  -54, -65, -24, -35, 57,   127,  4,   -66, 26,  -36,
    43,   -47,  18,  14,  12,  16,  39,   -100, 22,  -39, 8,   -9,
    17,   97,   44,  -36, -14, -6,  108,  44,   -47, 17,  -17, 13,
    95,   16,   -34, 45,  -4,  -15, 38,   -102, 23,  -41, 7,   -11,
    45,   68,   16,  -7,  14,  23,  75,   -37,  -14, 24,  16,  6,
    47,   -74,  14,  -13, 16,  17,  -71,  -43,  -10, 18,  20,  12,
    105,  -90,  -44, -29, -14, 1,   85,   72,   -24, -11, 6,   19,
    -102, -14,  -41, 47,  -11, -17, -39,  63,   22,  -2,  8,   28,
    54,   -103, 7,   -42, 23,  -12, -78,  88,   -17, -27, 13,  3,
    -15,  96,   46,  -35, -16, -5,  68,   -42,  -7,  19,  23,  11,
    -72,  71,   -11, -10, 19,  20,  64,   -43,  -3,  18,  27,  12,
    40,   75,   21,  -14, 9,   16,  -23,  21,   38,  40,  -8,  -10,
    28,   40,   33,  21,  -3,  9,   -95,  -43,  -34, 18,  -4,  12,
    16,   10,   45,  51,  -15, -21, 12,   108,  49,  -47, -19, -17,
    -77,  89,   -16, -28, 14,  2,   84,   -51,  -23, 10,  7,   20,
    -110, -18,  -49, 43,  -19, -13, -107, -74,  -46, -13, -16, 17,
    -74,  17,   -13, 44,  17,  -14, -44,  106,  17,  -45, 13,  -15,
    94,   -79,  -33, -18, -3,  12,  102,  -79,  -41, -18, -11, 12,
    118,  37,   -57, 24,  -27, 6,   74,   -41,  -13, 20,  17,  10,
    -14,  54,   47,  7,   -17, 23,  16,   -11,  45,  50,  -15, -20,
    -54,  -22,  7,   39,  23,  -9,  -5,   -83,  56,  -22, -26, 8,
    14,   -47,  47,  14,  -17, 16,  -2,   -113, 59,  -52, -29, -22,
    97,   -126, -36, -65, -6,  -35, 21,   -123, 40,  -62, -10, -32,
    110,  120,  -49, -59, -19, -29, -115, 81,   -54, -20, -24, 10,
    -27,  114,  34,  -53, -4,  -23, -87,  47,   -26, 14,  4,   16,
    -21,  -69,  40,  -8,  -10, 22,  17,   -28,  44,  33,  -14, -3,
    0,    107,  61,  -46, -31, -16, 8,    -54,  53,  7,   -23, 23,
    -46,  -40,  15,  21,  15,  9,   -15,  9,    46,  52,  -16, -22,
    42,   16,   19,  45,  11,  -15, 68,   74,   -7,  -13, 23,  17,
    2,    114,  59,  -53, -29, -23, -113, 17,   -52, 44,  -22, -14,
    -110, 37,   -49, 24,  -19, 6,   41,   17,   20,  44,  10,  -14,
    -80,  -74,  -19, -13, 11,  17,  -39,  101,  22,  -40, 8,   -10,
    3,    113,  58,  -52, -28, -22, 105,  109,  -44, -48, -14, -18,
    -34,  -41,  27,  20,  3,   10,  51,   75,   10,  -14, 20,  16,
    83,   -79,  -22, -18, 8,   12,  -116, -41,  -55, 20,  -25, 10,
    40,   72,   21,  -11, 9,   19,  -44,  -8,   17,  53,  13,  -23,
    -42,  42,   19,  19,  11,  11,  99,   -76,  -38, -15, -8,  15,
    45,   44,   16,  17,  14,  13,  -57,  75,   4,   -14, 26,  16,
    61,   -100, 0,   -39, 30,  -9,  -8,   -75,  53,  -14, -23, 16,
    -53,  87,   8,   -26, 22,  4,   21,   117,  40,  -56, -10, -26,
    70,   -112, -9,  -51, 21,  -21, 92,   121,  -31, -60, -1,  -30,
    -16,  -86,  45,  -25, -15, 5,   -110, -103, -49, -42, -19, -12,
    20,   13,   41,  48,  -11, -18, 11,   -67,  50,  -6,  -20, 24,
    52,   108,  9,   -47, 21,  -17, -19,  -57,  42,  4,   -12, 26,
    13,   -43,  48,  18,  -18, 12,  101,  -111, -40, -50, -10, -20,
    -88,  -47,  -27, 14,  3,   16,  87,   -15,  -26, 46,  4,   -16,
    -8,   111,  53,  -50, -23, -20, -20,  121,  41,  -60, -11, -30,
    -11,  87,   50,  -26, -20, 4,   -83,  61,   -22, 0,   8,   30,
    2,    -107, 59,  -46, -29, -16, 71,   -52,  -10, 9,   20,  21,
    36,   -75,  25,  -14, 5,   16,  50,   49,   11,  12,  19,  18,
    -15,  -52,  46,  9,   -16, 21,  72,   29,   -11, 32,  19,  -2,
    -84,  21,   -23, 40,  7,   -10, -17,  107,  44,  -46, -14, -16,
    -123, 79,   -62, -18, -32, 12,  76,   84,   -15, -23, 15,  7,
    -79,  -110, -18, -49, 12,  -19, -86,  92,   -25, -31, 5,   -1,
    91,   -14,  -30, 47,  0,   -17, -47,  78,   14,  -17, 16,  13,
    -46,  14,   15,  47,  15,  -17, 39,   74,   22,  -13, 8,   17,
    15,   39,   46,  22,  -16, 8,   15,   76,   46,  -15, -16, 15,
    -114, 20,   -53, 41,  -23, -11, -52,  -87,  9,   -26, 21,  4,
    6,    -90,  55,  -29, -25, 1,   29,   40,   32,  21,  -2,  9,
    12,   11,   49,  50,  -19, -20, 77,   102,  -16, -41, 14,  -11,
    78,   106,  -17, -45, 13,  -15, -50,  46,   11,  15,  19,  15,
    45,   -96,  16,  -35, 14,  -5,  -87,  -51,  -26, 10,  4,   20,
    62,   -9,   -1,  52,  29,  -22, 109,  -65,  -48, -4,  -18, 26,
    -102, 95,   -41, -34, -11, -4,  -92,  -19,  -31, 42,  -1,  -12,
    4,    50,   57,  11,  -27, 19,  -36,  -51,  25,  10,  5,   20,
    -114, 17,   -53, 44,  -23, -14, -121, -122, -60, -61, -30, -31,
    23,   86,   38,  -25, -8,  5,   -44,  -76,  17,  -15, 13,  15,
    91,   -107, -30, -46, 0,   -16, 40,   -44,  21,  17,  9,   13,
    106,  -41,  -45, 20,  -15, 10,  -110, 114,  -49, -53, -19, -23,
    -14,  45,   47,  16,  -17, 14,  -19,  105,  42,  -44, -12, -14,
    -112, 46,   -51, 15,  -21, 15,  109,  -112, -48, -51, -18, -21,
    -18,  -45,  43,  16,  -13, 14,  38,   99,   23,  -38, 7,   -8,
    39,   -38,  22,  23,  8,   7,   103,  10,   -42, 51,  -12, -21,
    76,   81,   -15, -20, 15,  10,  -74,  93,   -13, -32, 17,  -2,
    -81,  85,   -20, -24, 10,  6,   -8,   94,   53,  -33, -23, -3,
    64,   110,  -3,  -49, 27,  -19, -20,  35,   41,  26,  -11, 4,
    -20,  37,   41,  24,  -11, 6,   95,   20,   -34, 41,  -4,  -11,
    -57,  64,   4,   -3,  26,  27,  23,   -114, 38,  -53, -8,  -23,
    -80,  -89,  -19, -28, 11,  2,   -110, -78,  -49, -17, -19, 13,
    74,   -64,  -13, -3,  17,  27,  54,   -105, 7,   -44, 23,  -14,
    57,   20,   4,   41,  26,  -11, -50,  -20,  11,  41,  19,  -11,
    -46,  67,   15,  -6,  15,  24,  115,  51,   -54, 10,  -24, 20,
    -74,  -23,  -13, 38,  17,  -8,  -44,  86,   17,  -25, 13,  5,
    12,   84,   49,  -23, -19, 7,   -51,  -39,  10,  22,  20,  8,
    5,    19,   56,  42,  -26, -12, -67,  -119, -6,  -58, 24,  -28,
    106,  -73,  -45, -12, -15, 18,  -12,  110,  49,  -49, -19, -19,
    -16,  69,   45,  -8,  -15, 22,  -71,  -102, -10, -41, 20,  -11,
    49,   99,   12,  -38, 18,  -8,  -79,  -105, -18, -44, 12,  -14,
    -35,  15,   26,  46,  4,   -16, -50,  48,   11,  13,  19,  17,
    112,  -48,  -51, 13,  -21, 17,  114,  -10,  -53, 51,  -23, -21,
    -46,  11,   15,  50,  15,  -20, 114,  -26,  -53, 35,  -23, -5,
    40,   -86,  21,  -25, 9,   5,   50,   85,   11,  -24, 19,  6,
    73,   18,   -12, 43,  18,  -13, 50,   -83,  11,  -22, 19,  8,
    6,    -122, 55,  -61, -25, -31, -4,   -65,  57,  -4,  -27, 26,
    -121, -7,   -60, 54,  -30, -24, 6,    52,   55,  9,   -25, 21,
    -128, 73,   -67, -12, -37, 18,  36,   96,   25,  -35, 5,   -5,
    45,   95,   16,  -34, 14,  -4,  -24,  59,   37,  2,   -7,  28,
    39,   81,   22,  -20, 8,   10,  -7,   -68,  54,  -7,  -24, 23,
    109,  -67,  -48, -6,  -18, 24,  72,   72,   -11, -11, 19,  19,
    -65,  -100, -4,  -39, 26,  -9,  73,   45,   -12, 16,  18,  14,
    -104, -105, -43, -44, -13, -14, -79,  -18,  -18, 43,  12,  -13,
    14,   46,   47,  15,  -17, 15,  107,  -32,  -46, 29,  -16, 1,
    -89,  -79,  -28, -18, 2,   12,  -112, 84,   -51, -23, -21, 7,
    30,   -20,  31,  41,  -1,  -11, -14,  18,   47,  43,  -17, -13,
    42,   -16,  19,  45,  11,  -15, 51,   -94,  10,  -33, 20,  -3,
    22,   42,   39,  19,  -9,  11,  -96,  -4,   -35, 57,  -5,  -27,
    -92,  104,  -31, -43, -1,  -13, -112, -103, -51, -42, -21, -12,
    -57,  71,   4,   -10, 26,  20,  -113, -66,  -52, -5,  -22, 25,
    30,   -91,  31,  -30, -1,  0,   67,   -101, -6,  -40, 24,  -10,
    -4,   -36,  57,  25,  -27, 5,   -118, 56,   -57, 5,   -27, 25,
    -21,  99,   40,  -38, -10, -8,  -29,  39,   32,  22,  -2,  8,
    -76,  -20,  -15, 41,  15,  -11, 115,  11,   -54, 50,  -24, -20,
    117,  -79,  -56, -18, -26, 12,  63,   -36,  -2,  25,  28,  5,
    -56,  -22,  5,   39,  25,  -9,  -65,  122,  -4,  -61, 26,  -31,
    60,   110,  1,   -49, 29,  -19, 18,   -112, 43,  -51, -13, -21,
    -47,  12,   14,  49,  16,  -19, 80,   -127, -19, -66, 11,  -36,
    100,  -82,  -39, -21, -9,  9,   -92,  -112, -31, -51, -1,  -21,
    -47,  54,   14,  7,   16,  23,  45,   7,    16,  54,  14,  -24,
    -79,  85,   -18, -24, 12,  6,   38,   -78,  23,  -17, 7,   13,
    -54,  -80,  7,   -19, 23,  11,  -8,   88,   53,  -27, -23, 3,
    120,  71,   -59, -10, -29, 20,  -74,  79,   -13, -18, 17,  12,
    16,   -75,  45,  -14, -15, 16,  41,   -109, 20,  -48, 10,  -18,
    -104, 48,   -43, 13,  -13, 17,  114,  -14,  -53, 47,  -23, -17,
    -50,  -80,  11,  -19, 19,  11,  44,   -79,  17,  -18, 13,  12,
    16,   -20,  45,  41,  -15, -11, 110,  113,  -49, -52, -19, -22,
    16,   25,   45,  36,  -15, -6,  40,   -55,  21,  6,   9,   24,
    -75,  112,  -14, -51, 16,  -21, -60,  103,  1,   -42, 29,  -12,
    -71,  102,  -10, -41, 20,  -11, -58,  -43,  3,   18,  27,  12,
    71,   101,  -10, -40, 20,  -10, 28,   45,   33,  16,  -3,  14,
    -112, 22,   -51, 39,  -21, -9,  15,   93,   46,  -32, -16, -2,
    92,   78,   -31, -17, -1,  13,  -21,  -107, 40,  -46, -10, -16,
    -60,  -55,  1,   6,   29,  24,  -114, 57,   -53, 4,   -23, 26,
    36,   -84,  25,  -23, 5,   7,   125,  34,   -64, 27,  -34, 3,
    101,  -124, -40, -63, -10, -33, -50,  -60,  11,  1,   19,  29,
    21,   -48,  40,  13,  -10, 17,  -115, -117, -54, -56, -24, -26,
    90,   121,  -29, -60, 1,   -30, 33,   15,   28,  46,  2,   -16,
    89,   -22,  -28, 39,  2,   -9,  28,   -9,   33,  52,  -3,  -22,
    40,   43,   21,  18,  9,   12,  43,   43,   18,  18,  12,  12,
    44,   40,   17,  21,  13,  9,   49,   42,   12,  19,  18,  11,
    46,   42,   15,  19,  15,  11,  37,   54,   24,  7,   6,   23,
    54,   44,   7,   17,  23,  13,  39,   35,   22,  26,  8,   4,
    53,   42,   8,   19,  22,  11,  35,   36,   26,  25,  4,   5,
    53,   49,   8,   12,  22,  18,  36,   38,   25,  23,  5,   7,
    42,   37,   19,  24,  11,  6,   50,   35,   11,  26,  19,  4,
    44,   47,   17,  14,  13,  16,  43,   44,   18,  17,  12,  13,
    44,   36,   17,  25,  13,  5,   49,   47,   12,  14,  18,  16,
    54,   46,   7,   15,  23,  15,  60,   55,   1,   6,   29,  24,
    48,   44,   13,  17,  17,  13,  46,   43,   15,  18,  15,  12,
    56,   51,   5,   10,  25,  20,  51,   39,   10,  22,  20,  8,
    39,   56,   22,  5,   8,   25,  45,   59,   16,  2,   14,  28,
    54,   47,   7,   14,  23,  16,  43,   65,   18,  -4,  12,  26,
    38,   59,   23,  2,   7,   28,  51,   52,   10,  9,   20,  21,
    45,   62,   16,  -1,  14,  29,  39,   48,   22,  13,  8,   17,
    43,   43,   18,  18,  12,  12,  43,   38,   18,  23,  12,  7,
    33,   47,   28,  14,  2,   16,  49,   49,   12,  12,  18,  18,
    49,   51,   12,  10,  18,  20,  38,   57,   23,  4,   7,   26,
    28,   46,   33,  15,  -3,  15,  55,   51,   6,   10,  24,  20,
    45,   43,   16,  18,  14,  12,  44,   50,   17,  11,  13,  19,
    51,   47,   10,  14,  20,  16,  53,   46,   8,   15,  22,  15,
    47,   47,   14,  14,  16,  16,  54,   48,   7,   13,  23,  17,
    50,   42,   11,  19,  19,  11,  55,   34,   6,   27,  24,  3,
    32,   35,   29,  26,  1,   4,   32,   36,   29,  25,  1,   5,
    39,   41,   22,  20,  8,   10,  38,   53,   23,  8,   7,   22,
    35,   43,   26,  18,  4,   12,  28,   52,   33,  9,   -3,  21,
    31,   53,   30,  8,   0,   22,  39,   47,   22,  14,  8,   16,
    41,   30,   20,  31,  10,  -1,  43,   39,   18,  22,  12,  8,
    35,   44,   26,  17,  4,   13,  42,   30,   19,  31,  11,  -1,
    52,   38,   9,   23,  21,  7,   48,   38,   13,  23,  17,  7,
    39,   37,   22,  24,  8,   6,   46,   44,   15,  17,  15,  13,
    34,   55,   27,  6,   3,   24,  58,   55,   3,   6,   27,  24,
    45,   40,   16,  21,  14,  9,   46,   47,   15,  14,  15,  16,
    42,   45,   19,  16,  11,  14,  49,   47,   12,  14,  18,  16,
    48,   47,   13,  14,  17,  16,  39,   52,   22,  9,   8,   21,
    43,   52,   18,  9,   12,  21,  39,   59,   22,  2,   8,   28,
    44,   62,   17,  -1,  13,  29,  46,   54,   15,  7,   15,  23,
    50,   53,   11,  8,   19,  22,  42,   54,   19,  7,   11,  23,
    48,   52,   13,  9,   17,  21,  44,   44,   17,  17,  13,  13,
    33,   55,   28,  6,   2,   24,  46,   54,   15,  7,   15,  23,
    47,   59,   14,  2,   16,  28,  34,   56,   27,  5,   3,   25,
    35,   53,   26,  8,   4,   22,  52,   63,   9,   -2,  21,  28,
    50,   56,   11,  5,   19,  25,  43,   55,   18,  6,   12,  24,
    34,   51,   27,  10,  3,   20,  43,   48,   18,  13,  12,  17,
    27,   45,   34,  16,  -4,  14,  30,   62,   31,  -1,  -1,  29,
    38,   47,   23,  14,  7,   16,  37,   58,   24,  3,   6,   27,
    41,   51,   20,  10,  10,  20,  44,   44,   17,  17,  13,  13,
    30,   40,   31,  21,  -1,  9,   43,   49,   18,  12,  12,  18,
    47,   34,   14,  27,  16,  3,   41,   53,   20,  8,   10,  22,
    39,   37,   22,  24,  8,   6,   37,   55,   24,  6,   6,   24,
    44,   45,   17,  16,  13,  14,  42,   45,   19,  16,  11,  14,
    47,   38,   14,  23,  16,  7,   45,   46,   16,  15,  14,  15,
    58,   39,   3,   22,  27,  8,   45,   44,   16,  17,  14,  13,
    54,   41,   7,   20,  23,  10,  59,   46,   2,   15,  28,  15,
    48,   28,   13,  33,  17,  -3,  51,   50,   10,  11,  20,  19};

char output0[] = "0x8C4DEB9F, 0x52";

#define BUFFER_ASCII_DUMP_WIDTH 16
/* Macro to print the contents of a buffer */
#define PRINT_BUFFER(buffer, len, description)     \
  do {                                             \
    printf("%s:\n[", description);                 \
    for (size_t i = 0; i < len; ++i) {             \
      printf("%i", ((const int8_t *)(buffer))[i]); \
      if (i < len - 1) {                           \
        printf(", ");                              \
      }                                            \
    }                                              \
    printf("]\n\n");                               \
  } while (0)

/* Function to print the data within an mbuf segment */
void print_mbuf_data(struct rte_mbuf *m, uint16_t offset, size_t data_len,
                     const char description[]) {
  uint8_t *data =
      rte_pktmbuf_mtod_offset(m, uint8_t *, offset);  // Get data pointer
  PRINT_BUFFER(data, data_len, description);
}

size_t calculateArraySize(const char input[]) {
  size_t count = 0;
  const char *prefix = "0x";
  const char *position = input;

  while ((position = strstr(position, prefix)) != NULL) {
    count++;
    position += strlen(prefix);  // Move past the current "0x"
  }

  return count;
}

std::vector<uint32_t> convert_to_uint32(const int8_t *buffer, size_t length) {
  std::vector<uint32_t> values;
  for (size_t i = 0; i < length; i += 4) {
    uint32_t value = (buffer[i] & 0xFF) | ((buffer[i + 1] & 0xFF) << 8) |
                     ((buffer[i + 2] & 0xFF) << 16) |
                     ((buffer[i + 3] & 0xFF) << 24);
    values.push_back(value);
  }
  return values;
}

void print_buffer(const char *buffer_name,
                  const std::vector<uint32_t> &buffer) {
  std::cout << buffer_name << "=[";
  for (size_t i = 0; i < PRINT_NUM; i++) {
    std::cout << "0x" << std::hex << std::uppercase << buffer[i];
    if (i < PRINT_NUM - 1) {
      std::cout << ", ";
    }
  }
  std::cout << "]\n" << std::endl;
}

std::string convertToHex(const uint8_t *buffer, size_t length) {
  std::ostringstream oss;
  for (size_t i = 0; i < length; ++i) {
    if (i != 0) oss << ", ";
    oss << "0x" << std::hex << std::uppercase << std::setfill('0')
        << std::setw(2) << static_cast<int>(buffer[i]);
  }
  return oss.str();
}

#ifndef INPUT_DEMUL
static int parse_values(char *tokens, uint32_t *data, uint32_t *data_length,
                        size_t max_data_size) {
  uint32_t n_tokens = 0;
  uint32_t data_size = 32;

  uint32_t *values, *values_resized;
  char *tok, *error = NULL;

  tok = strtok(tokens, VALUE_DELIMITER);
  if (tok == NULL) return -1;

  values = (uint32_t *)malloc(sizeof(uint32_t) * data_size);
  if (values == NULL) {
    printf("Failed to allocate memory\n");
    return -1;
  }

  while (tok != NULL) {
    values_resized = NULL;

    if (n_tokens >= data_size) {
      data_size *= 2;

      values_resized =
          (uint32_t *)realloc(values, sizeof(uint32_t) * data_size);
      if (values_resized == NULL) {
        free(values);
        printf("Failed to reallocate memory\n");
        return -1;
      }
      values = values_resized;
    }

    values[n_tokens] = (uint32_t)strtoul(tok, &error, 0);

    if ((error == NULL) || (*error != '\0')) {
      printf("Failed to convert '%s'\n", tok);
      free(values);
      return -1;
    }

    *data_length = *data_length + (strlen(tok) - strlen("0x")) / 2;

    tok = strtok(NULL, VALUE_DELIMITER);
    if (tok == NULL) break;

    n_tokens++;
  }

  for (size_t i = 0; i < n_tokens + 1; i++) {
    data[i] = values[i];
  }

  free(values);
  return 0;
}
#endif

int allocate_buffers_on_socket(struct rte_bbdev_op_data **buffers,
                               const int len, const int socket) {
  int i;
  std::cout << "start to allocate to socket" << std::endl;
  *buffers = static_cast<struct rte_bbdev_op_data *>(
      rte_zmalloc_socket(NULL, len, 0, socket));
  std::cout << "no error" << std::endl;
  if (*buffers == NULL) {
    printf("WARNING: Failed to allocate op_data on socket %d\n", socket);
    /* try to allocate memory on other detected sockets */
    for (i = 0; i < socket; i++) {
      *buffers = static_cast<struct rte_bbdev_op_data *>(
          rte_zmalloc_socket(NULL, len, 0, i));
      if (*buffers != NULL) break;
    }
  }

  return (*buffers == NULL) ? TEST_FAILED : TEST_SUCCESS;
}

static inline bool check_bit(uint32_t bitmap, uint32_t bitmask) {
  return bitmap & bitmask;
}

static int init_op_data_objs_from_table(
    struct rte_bbdev_op_data *bufs, int8_t *demod_data,
    struct rte_mempool *mbuf_pool, const uint16_t n, uint16_t min_alignment,
    size_t seg_length  // Added seg_length as a parameter
                       // rte_mbuf *m_head
) {
  unsigned int i;

  for (i = 0; i < n; ++i) {
    char *data;
    struct rte_mbuf *m_head = rte_pktmbuf_alloc(mbuf_pool);

    bufs[i].data = m_head;
    bufs[i].offset = 0;
    bufs[i].length = 0;

    data = rte_pktmbuf_append(m_head, seg_length);

    // Copy data from demod_data to the mbuf
    rte_memcpy(data, demod_data + (i * seg_length), seg_length);
    bufs[i].length += seg_length;
  }

  return 0;
}

static int init_op_output_objs_from_buffer(struct rte_bbdev_op_data *bufs,
                                           uint8_t *decoded_buffer_ptr,
                                           struct rte_mempool *mbuf_pool,
                                           const uint16_t n,
                                           uint16_t min_alignment,
                                           size_t seg_length) {
  unsigned int i;

  for (i = 0; i < n; ++i) {
    struct rte_mbuf *m_head = rte_pktmbuf_alloc(mbuf_pool);

    bufs[i].data = m_head;
    bufs[i].offset = 0;
    bufs[i].length = 0;

    // Prepare the mbuf to receive the output data
    char *data = rte_pktmbuf_append(m_head, seg_length);
    assert(data == RTE_PTR_ALIGN(data, min_alignment));

    // Assuming you will copy data from decoded_buffer_ptr to data
    rte_memcpy(data, decoded_buffer_ptr + i * seg_length, seg_length);

    bufs[i].length += seg_length;
  }

  return 0;
}

static int init_buffer_from_objs(struct rte_bbdev_op_data *bufs,
                                 uint8_t *decoded_buffer_ptr, const uint16_t n,
                                 uint16_t min_alignment, size_t seg_length) {
  unsigned int i;

  for (i = 0; i < n; ++i) {
    struct rte_mbuf *m_head = bufs[i].data;

    // Ensure the mbuf is properly aligned and prepared
    char *data = rte_pktmbuf_mtod(m_head, char *);
    assert(data == RTE_PTR_ALIGN(data, min_alignment));

    // Copy the data from the mbuf back to the buffer
    rte_memcpy(decoded_buffer_ptr + i * seg_length, data, seg_length);
  }

  return 0;
}

int main() {
  static constexpr size_t kVarNodesSize = 1024 * 1024 * sizeof(int16_t);

#ifndef INPUT_DEMUL
  size_t max_data_size = calculateArraySize(input0);
  printf("Max data size: %zu\n", max_data_size);
  uint32_t input_buf[max_data_size];
  uint32_t data_length = 0;

  // zero out input_buf
  for (size_t i = 0; i < max_data_size; ++i) {
    input_buf[i] = 0;
  }

  int result = parse_values(input0, input_buf, &data_length, max_data_size);
  if (result == 0) {
    printf("Data length: %u bytes\n\n", data_length);
  } else {
    printf("Error parsing values\n");
    exit(1);
  }

  print_buffer("Input data",
               std::vector<uint32_t>(input_buf, input_buf + max_data_size));

  std::cout << "input_buf_uint32: [";
  for (size_t i = 0; i < max_data_size; ++i) {
    std::printf("%u, ", input_buf[i]);
  }
  std::cout << "]\n" << std::endl;

  // Conversion in little-endian format
  std::vector<int8_t> llr_data;
  for (const uint32_t value : input_buf) {
    llr_data.push_back(static_cast<int8_t>(value & 0xFF));
    llr_data.push_back(static_cast<int8_t>((value >> 8) & 0xFF));
    llr_data.push_back(static_cast<int8_t>((value >> 16) & 0xFF));
    llr_data.push_back(static_cast<int8_t>((value >> 24) & 0xFF));
  }

  assert(llr_data.size() == data_length);

  size_t data_num = data_length;  // each value is 1 byte so dim==bytes
  std::cout << "data_num: " << data_num << std::endl;
#else
  size_t data_num = sizeof(input_demul) / sizeof(input_demul[0]);
  std::cout << "data_num: " << data_num << std::endl;
#endif

  int8_t *llr_ptr;
  AllocBuffer1d(&llr_ptr, data_num, Agora_memory::Alignment_t::kAlign64, 1);

#ifdef INPUT_DEMUL
  std::memcpy(llr_ptr, input_demul, data_num);
#else
  std::memcpy(llr_ptr, llr_data.data(), data_num);
#endif

  std::cout << "LLR data: [";
  for (size_t i = 0; i < PRINT_NUM; ++i) {
    std::printf("%i, ", llr_ptr[i]);
  }
  std::cout << "]\n" << std::endl;

// convert llr_data back to hex for verification
#ifndef INPUT_DEMUL
  std::vector<uint32_t> llr_back = convert_to_uint32(llr_ptr, data_num);
  print_buffer("llr_back", llr_back);
#endif

  int8_t *decode_buf;
  uint8_t *decode_buf_acc;
  size_t decode_num = data_num;
  AllocBuffer1d(&decode_buf, decode_num, Agora_memory::Alignment_t::kAlign64,
                1);
  AllocBuffer1d(&decode_buf_acc, decode_num,
                Agora_memory::Alignment_t::kAlign64, 1);

  std::unique_ptr<AgoraScrambler::Scrambler> scrambler =
      std::make_unique<AgoraScrambler::Scrambler>();

#ifdef SW_DECODE
  std::cout << "\n*********** FlexRAN decoding operation ***********\n"
            << std::endl;
  int16_t *resp_var_nodes_ =
      static_cast<int16_t *>(Agora_memory::PaddedAlignedAlloc(
          Agora_memory::Alignment_t::kAlign64, kVarNodesSize));

  /***  DPDK TestCase Configuration ***/
  // size_t zc = 7;
  // size_t basegraph = 2;
  // size_t nRows = 42;
  // size_t n_cb = 350;
  // size_t numChannellrs = n_cb;
  // size_t numFillerBits = 30;
  // size_t maxIter = 8;
  // size_t enableEarlyTerm = true;  // RTE_BBDEV_LDPC_ITERATION_STOP_ENABLE

  /***  Agora Configuration ***/
  size_t zc = 128;
  size_t basegraph = 1;
  size_t nRows = 31;
  size_t n_cb = 6528;
  size_t numChannellrs = n_cb;
  size_t numFillerBits = 0;
  size_t maxIter = 5;
  size_t enableEarlyTerm = true;

  size_t num_message_bits = 22 * zc - numFillerBits;

  struct bblib_ldpc_decoder_5gnr_request ldpc_decoder_5gnr_request {};
  struct bblib_ldpc_decoder_5gnr_response ldpc_decoder_5gnr_response {};

  ldpc_decoder_5gnr_request.numChannelLlrs = numChannellrs;
  ldpc_decoder_5gnr_request.numFillerBits = numFillerBits;
  ldpc_decoder_5gnr_request.maxIterations = maxIter;
  ldpc_decoder_5gnr_request.enableEarlyTermination = enableEarlyTerm;
  ldpc_decoder_5gnr_request.Zc = zc;
  ldpc_decoder_5gnr_request.baseGraph = basegraph;
  ldpc_decoder_5gnr_request.nRows = nRows;
  ldpc_decoder_5gnr_request.varNodes = llr_ptr;

  ldpc_decoder_5gnr_response.numMsgBits = num_message_bits;
  ldpc_decoder_5gnr_response.varNodes = resp_var_nodes_;
  ldpc_decoder_5gnr_response.compactedMessageBytes = (uint8_t *)decode_buf;

  bblib_ldpc_decoder_5gnr(&ldpc_decoder_5gnr_request,
                          &ldpc_decoder_5gnr_response);

  std::cout << "Decoded data before scrambler: [";
  for (size_t i = 0; i < PRINT_NUM; ++i) {
    std::printf("%i, ", decode_buf[i]);
  }
  std::cout << "]\n" << std::endl;

  scrambler->Descramble((uint8_t *)decode_buf, decode_num);
  std::cout << "Descrambling Completed\n" << std::endl;

  // print decoded data
  std::cout << "Decoded data after scrambler: [";
  for (size_t i = 0; i < PRINT_NUM; ++i) {
    std::printf("%i, ", decode_buf[i]);
  }
  std::cout << "]\n" << std::endl;

#ifndef INPUT_DEMUL
  std::vector<uint32_t> decoded_data =
      convert_to_uint32(decode_buf, decode_num * 1);
  print_buffer("decoded_data_hex", decoded_data);
#endif

  // Clean up
  free(resp_var_nodes_);
  free(decode_buf);
#endif

#ifdef HW_DECODE
  // Decoding operation with ACC100
  std::cout << "\n*********** ACC100 decoding operation ***********\n"
            << std::endl;
  std::string core_list = std::to_string(34);
  const char *rte_argv[] = {"txrx",        "-l",           core_list.c_str(),
                            "--log-level", "lib.eal:info", nullptr};
  int rte_argc = static_cast<int>(sizeof(rte_argv) / sizeof(rte_argv[0])) - 1;

  // Required Structures

  struct rte_bbdev_dec_op *ref_dec_op[64];
  struct rte_bbdev_dec_op *ops_deq[64];

  struct rte_bbdev_queue_conf qconf;

  struct rte_bbdev_info info;

  struct rte_mempool *ops_mp;
  struct rte_mempool *in_mbuf_pool;
  struct rte_mempool *out_mbuf_pool;
  rte_mempool *mbuf_pool;

  rte_mbuf *input_pkts_burst[54];
  rte_mbuf *output_pkts_burst[54];

  struct rte_bbdev_op_data **inputs;
  struct rte_bbdev_op_data **hard_outputs;

  uint8_t dev_id = 0;
  uint16_t num_ops = 2047;
  uint16_t burst_sz = 1;
  uint16_t min_alignment;

  // Initialize DPDK and Device environment
  int ret = rte_eal_init(rte_argc, const_cast<char **>(rte_argv));
  RtAssert(
      ret >= 0,
      "Failed to initialize DPDK.  Are you running with root permissions?");

  int nb_bbdevs = rte_bbdev_count();
  // std::cout<<"num bbdevs: " << nb_bbdevs << std::endl;
  if (nb_bbdevs == 0) rte_exit(EXIT_FAILURE, "No bbdevs detected!\n");
  rte_bbdev_info_get(dev_id, &info);

  rte_bbdev_intr_enable(dev_id);
  rte_bbdev_info_get(dev_id, &info);

  ret = rte_bbdev_setup_queues(dev_id, 4, info.socket_id);

  qconf.socket = info.socket_id;
  qconf.queue_size = info.drv.queue_size_lim;
  qconf.op_type = RTE_BBDEV_OP_LDPC_DEC;
  qconf.priority = 0;

  for (int q_id = 0; q_id < 4; q_id++) {
    /* Configure all queues belonging to this bbdev device */
    ret = rte_bbdev_queue_configure(dev_id, q_id, &qconf);
    if (ret < 0)
      rte_exit(EXIT_FAILURE,
               "ERROR(%d): BBDEV %u queue %u not configured properly\n", ret,
               dev_id, q_id);
  }

  rte_bbdev_start(dev_id);

  ops_mp = rte_bbdev_op_pool_create("RTE_BBDEV_OP_LDPC_DEC_poo",
                                    RTE_BBDEV_OP_LDPC_DEC, num_ops,
                                    OPS_CACHE_SIZE, rte_socket_id());

  mbuf_pool =
      rte_pktmbuf_pool_create("bbdev_mbuf_pool", NB_MBUF, 256, 0,
                              RTE_MBUF_DEFAULT_BUF_SIZE, rte_socket_id());
  if (mbuf_pool == NULL) rte_exit(EXIT_FAILURE, "Unable to create\n");

  in_mbuf_pool = rte_pktmbuf_pool_create("in_pool_0", 16383, 0, 0, 22744, 0);
  out_mbuf_pool =
      rte_pktmbuf_pool_create("hard_out_pool_0", 16383, 0, 0, 22744, 0);

  if (in_mbuf_pool == nullptr or out_mbuf_pool == nullptr) {
    std::cerr << "Error: Unable to create mbuf pool: "
              << rte_strerror(rte_errno) << std::endl;
  }

  if (ops_mp == nullptr) {
    std::cerr << "Error: Failed to create memory pool for bbdev operations."
              << std::endl;
  } else {
    std::cout << "Memory pool for bbdev operations created successfully."
              << std::endl;
  }

  rte_bbdev_dec_op_alloc_bulk(ops_mp, ref_dec_op, burst_sz);

  rte_pktmbuf_alloc_bulk(mbuf_pool, input_pkts_burst, MAX_PKT_BURST);
  rte_pktmbuf_alloc_bulk(mbuf_pool, output_pkts_burst, MAX_PKT_BURST);
  const struct rte_bbdev_op_cap *cap = info.drv.capabilities;
  const struct rte_bbdev_op_cap *capabilities = NULL;
  rte_bbdev_info_get(dev_id, &info);
  for (unsigned int i = 0; cap->type != RTE_BBDEV_OP_NONE; ++i, ++cap) {
    std::cout << "cap is: " << cap->type << std::endl;
    if (cap->type == RTE_BBDEV_OP_LDPC_DEC) {
      capabilities = cap;
      std::cout << "capability is being set to: " << capabilities->type
                << std::endl;
      break;
    }
  }

  inputs =
      (struct rte_bbdev_op_data **)malloc(sizeof(struct rte_bbdev_op_data *));
  hard_outputs =
      (struct rte_bbdev_op_data **)malloc(sizeof(struct rte_bbdev_op_data *));

  allocate_buffers_on_socket(inputs, 4 * sizeof(struct rte_bbdev_op_data), 0);
  allocate_buffers_on_socket(hard_outputs, 4 * sizeof(struct rte_bbdev_op_data),
                             0);

  min_alignment = info.drv.min_alignment;
  std::cout << "rte_pktmbuf_alloc successful" << std::endl;

  // Launch operation
  for (int i = 0; i < burst_sz; ++i) {
    ref_dec_op[i]->ldpc_dec.basegraph = basegraph;
    ref_dec_op[i]->ldpc_dec.z_c = zc;
    ref_dec_op[i]->ldpc_dec.n_filler = numFillerBits;
    ref_dec_op[i]->ldpc_dec.n_cb = n_cb;
    ref_dec_op[i]->ldpc_dec.cb_params.e = num_message_bits;
    ref_dec_op[i]->ldpc_dec.iter_max = maxIter;

    ref_dec_op[i]->ldpc_dec.q_m = (uint8_t)6;  // 6 for 64-QAM
    ref_dec_op[i]->ldpc_dec.code_block_mode =
        (uint8_t)1;  // with 0 or 2 it produces 0 output
    ref_dec_op[i]->ldpc_dec.rv_index = (uint8_t)0;
    ref_dec_op[i]->opaque_data = nullptr;

    ref_dec_op[i]->ldpc_dec.op_flags += RTE_BBDEV_LDPC_ITERATION_STOP_ENABLE;
  }

  if (init_op_data_objs_from_table(*inputs, llr_ptr, in_mbuf_pool, 1,
                                   min_alignment, data_num) != 0) {
    std::cerr << "Error: Failed to initialize input data objects." << std::endl;
    return -1;
  }

  print_mbuf_data(inputs[0]->data, 0, PRINT_NUM, "*inputs[0]->data");

  if (init_op_output_objs_from_buffer(*hard_outputs, decode_buf_acc,
                                      out_mbuf_pool, 1, min_alignment, data_num)) {
    std::cerr << "Error: Failed to initialize output data objects."
              << std::endl;
    return -1;
  }

  print_mbuf_data(hard_outputs[0]->data, 0, PRINT_NUM,
                  "*hard_outputs[0]->data");

  ref_dec_op[0]->ldpc_dec.input = *inputs[0];
  print_mbuf_data(ref_dec_op[0]->ldpc_dec.input.data, 0, PRINT_NUM,
                  "ref_dec_op[0]->ldpc_dec.input");

  ref_dec_op[0]->ldpc_dec.hard_output = *hard_outputs[0];
  print_mbuf_data(ref_dec_op[0]->ldpc_dec.hard_output.data, 0, PRINT_NUM,
                  "ref_dec_op[0]->ldpc_dec.hard_output");

  std::cout << "no error when putting to ldpc_config" << std::endl;

  uint16_t enq = 0, deq = 0;

  enq += rte_bbdev_enqueue_ldpc_dec_ops(0, 0, &ref_dec_op[0], 1);
  deq += rte_bbdev_dequeue_ldpc_dec_ops(0, 0, &ops_deq[0], enq - deq);

  int max_retries = 1000000;
  int retry_count = 0;

  while (deq == 0 && retry_count < max_retries) {
    deq += rte_bbdev_dequeue_ldpc_dec_ops(0, 0, &ops_deq[0], enq - deq);
    retry_count++;
  }

  std::cout << "Dequeue Completed\n" << std::endl;

  print_mbuf_data(ref_dec_op[0]->ldpc_dec.hard_output.data, 0, PRINT_NUM,
                  "ref_dec_op[0]->ldpc_dec.hard_output");

  print_mbuf_data(hard_outputs[0]->data, 0, PRINT_NUM,
                  "*hard_outputs[0]->data");

  std::cout << "\nDecoded data before scrambler: [";
  for (size_t i = 0; i < PRINT_NUM; ++i) {
    std::printf("%i, ", (int8_t)decode_buf_acc[i]);
  }
  std::cout << "]\n" << std::endl;

  init_buffer_from_objs(*hard_outputs, decode_buf_acc, 1, min_alignment, data_num);

  std::cout << "Data copied from hard_outputs to decode_buf_acc" << std::endl;

  std::cout << "\nDecoded data before scrambler: [";
  for (size_t i = 0; i < PRINT_NUM; ++i) {
    std::printf("%i, ", (int8_t)decode_buf_acc[i]);
  }
  std::cout << "]\n" << std::endl;

  scrambler->Descramble(decode_buf_acc, decode_num);
  std::cout << "Descrambling Completed" << std::endl;

  // print decoded data
  std::cout << "Decoded data after scrambler: [";
  for (size_t i = 0; i < PRINT_NUM; ++i) {
    std::printf("%i, ", (int8_t)decode_buf_acc[i]);
  }
  std::cout << "]\n" << std::endl;

#endif

  free(llr_ptr);
}